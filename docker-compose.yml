version: '3.8'

services:
  frontend:
    build:
      context: .
      dockerfile: ./docker/frontend/Dockerfile
    ports:
      - "3000:3000"
    depends_on:
      - backend
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:3001/api
    networks:
      - blockchain-network

  admin:
    build:
      context: .
      dockerfile: ./docker/admin/Dockerfile
    ports:
      - "3002:3002"
    depends_on:
      - backend
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:3001/api
    networks:
      - blockchain-network

  backend:
    build:
      context: .
      dockerfile: ./docker/backend/Dockerfile
    ports:
      - "3001:3001"
    depends_on:
      - postgres
      - redis
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/blockchain_platform
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your_jwt_secret_key_here
      - EMAIL_SERVICE=smtp
      - EMAIL_HOST=smtp.example.com
      - EMAIL_PORT=587
      - EMAIL_USER=your_email@example.com
      - EMAIL_PASSWORD=your_email_password
      - FRONTEND_URL=http://localhost:3000
      - ADMIN_URL=http://localhost:3002
      - UPLOADS_DIR=/app/uploads
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3001/api/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: >
      sh -c "
        echo 'Waiting for PostgreSQL to be ready...' &&
        until nc -z postgres 5432; do sleep 1; done &&
        echo 'PostgreSQL is ready!' &&
        npx prisma migrate deploy &&
        yarn workspace @blockchain-platform/backend start
      "
    volumes:
      - uploads:/app/uploads
    networks:
      - blockchain-network

  postgres:
    image: postgres:14-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=blockchain_platform
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - blockchain-network

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - blockchain-network

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - frontend
      - admin
      - backend
    networks:
      - blockchain-network

networks:
  blockchain-network:
    driver: bridge

volumes:
  postgres-data:
  redis-data:
  uploads: 